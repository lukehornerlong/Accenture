application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName teamproject
    blueprints []
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme none
    creationTimestamp 1674227166181
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.9.3"
    jwtSecretKey "ZDg3OGJmYWQwMzUzYWJjZTM2NDE5ZmRiMWZkZTY1OWVkZGMyNjRiZGUyMGQwYjE0NjBkYTY3YmU2OTVjMzEwNDQ4NDk1YjQ2Y2E1MWJiMjliZjY0NDU5MjU5YmEwYjNjMjAxY2RlODZiMWYwYzVjODA2ZDEwZmZmMTBhNDdlMTE="
    languages [en]
    messageBroker false
    microfrontend false
    microfrontends []
    nativeLanguage en
    otherModules []
    packageName uk.ac.bham.teamproject
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipClient false
    skipUserManagement false
    testFrameworks [cypress]
    websocket false
    withAdminUi true
  }

  entities Comment, DietaryTags, Ingredient, LikedBy, Post, Recipe, UserExtra, UserPantry
}

entity Comment {
  comment String
  rating Integer
}
entity DietaryTags {
  dietary String
}
entity Ingredient {
  ingredientName String
  price Float
  shop String
}
entity LikedBy {
  liked Boolean
}
entity Post {
  postTitle String
  postPic ImageBlob
  postDesc String
  timestamp Instant
  likes Integer
  affordability Integer
  simplicity Integer
  shelfLife Integer
}
entity Recipe {
  recipeTitle String
}
entity UserExtra {
  profilePic ImageBlob
  biography String
  profileBanner ImageBlob
  age Integer
  pronouns String
}
entity UserPantry {
  timestamp Instant
}
relationship OneToOne {
  Comment{user(login)} to User
  UserExtra{user(login)} to User
}
relationship ManyToOne {
  Comment{post} to Post
  Ingredient{post} to Post
  LikedBy{post} to Post
  LikedBy{user(login)} to User
  Post{user(login)} to User
  UserPantry{post} to Post
  UserPantry{user(login)} to User
}
relationship ManyToMany {
  DietaryTags{post} to Post{dietaryTags(dietary)}
  Post{dietaryTags(dietary)} to DietaryTags{post}
}

